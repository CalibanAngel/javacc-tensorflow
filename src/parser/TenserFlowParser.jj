options{  static = true;}PARSER_BEGIN(TenserFlowParser)package parser;public class TenserFlowParser{  public static void main(String args []) throws ParseException  {    TenserFlowParser parser = new TenserFlowParser(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression : ");      try      {        parser.parse_init_func();      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        TenserFlowParser.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(TenserFlowParser)SKIP :{  < (" " | "\t" | "\n" | "\r")+ >  {    System.err.println("Skipping");  }}< DEFAULT > TOKEN :{  < ALPHA: [ "a"-"z", "A"-"Z" ] >| < DIGIT : [ "0"-"9" ] >| < END_LINE: ";" >}void word():{ Token t; }{  (< ALPHA >)+}void number():{ Token t; }{  (< DIGIT >)+}void signed_number():{ Token t; }{  ("-")? number()}void var_name():{ Token t; }{  word() (< DIGIT >)?}void array():{ Token t; }{  "[" ((var_name() | signed_number()) ("," (var_name() | signed_number()))*)? "]"}void param_elem():{ Token t; }{  var_name() | number() | array()}void param():{ Token t; }{  param_elem() ("," param_elem())*}// graph 50171350(inputs)->(outputs)void parse_init_func():{ Token t; }{  "graph" number() "(" var_name() ")" "->" "(" var_name() ")"   }// input = reshape( inputs, [-1, 28, 28, 1] );void parse_set_variable():{ Token t; }{  var_name() "=" var_name() "(" (param())? ")" < END_LINE >}